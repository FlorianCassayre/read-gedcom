import { FileDecoder } from './FileDecoder';

const ANSEL_KEYS_1 = [0x8d, 0x8e, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbc, 0xbd, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xcf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfe, 0x81, 0x88, 0x89, 0x92, 0x93, 0x94, 0xc7, 0xc8, 0xe8, 0xbe, 0xbf, 0xcd, 0xce];
const ANSEL_VALUES_1 = '\u200d\u200c\u0141\xd8\xd0\xde\xc6\u0152\u02b9\xb7\u266d\xae\xb1\u01a0\u01af\u02be\xb0\u0142\xf8\u0111\xfe\xe6\u0153\u02ba\u0131\xa3\xf0\u01a1\u01b0\xb0\u2113\u2117\xa9\u266f\xbf\xa1\xdf\u0309\u0300\u0301\u0302\u0303\u0304\u0306\u0307\u030c\u030a\ufe20\ufe21\u0315\u030b\u0310\u0327\u0328\u0323\u0324\u0325\u0333\u0332\u0326\u031c\u032e\ufe22\ufe23\u0313\xfc\x98\x9c\'\u201c\u201d\xdf\u20ac\u0308\u25af\u25aeeo';
const ANSEL_KEYS_2 = [0xe020, 0xe041, 0xe045, 0xe049, 0xe04f, 0xe055, 0xe059, 0xe061, 0xe065, 0xe069, 0xe06f, 0xe075, 0xe079, 0xe120, 0xe141, 0xe145, 0xe149, 0xe14f, 0xe155, 0xe157, 0xe159, 0xe161, 0xe165, 0xe169, 0xe16f, 0xe175, 0xe177, 0xe179, 0xe220, 0xe241, 0xe243, 0xe245, 0xe247, 0xe249, 0xe24b, 0xe24c, 0xe24d, 0xe24e, 0xe24f, 0xe250, 0xe252, 0xe253, 0xe255, 0xe257, 0xe259, 0xe25a, 0xe261, 0xe263, 0xe265, 0xe267, 0xe269, 0xe26b, 0xe26c, 0xe26d, 0xe26e, 0xe26f, 0xe270, 0xe272, 0xe273, 0xe275, 0xe277, 0xe279, 0xe27a, 0xe2a5, 0xe2b5, 0xe320, 0xe341, 0xe343, 0xe345, 0xe347, 0xe348, 0xe349, 0xe34a, 0xe34f, 0xe353, 0xe355, 0xe357, 0xe359, 0xe35a, 0xe361, 0xe363, 0xe365, 0xe367, 0xe368, 0xe369, 0xe36a, 0xe36f, 0xe373, 0xe375, 0xe377, 0xe379, 0xe37a, 0xe420, 0xe441, 0xe445, 0xe449, 0xe44e, 0xe44f, 0xe455, 0xe456, 0xe459, 0xe461, 0xe465, 0xe469, 0xe46e, 0xe46f, 0xe475, 0xe476, 0xe479, 0xe520, 0xe541, 0xe545, 0xe547, 0xe549, 0xe54f, 0xe555, 0xe561, 0xe565, 0xe567, 0xe569, 0xe56f, 0xe575, 0xe5a5, 0xe5b5, 0xe620, 0xe641, 0xe645, 0xe647, 0xe649, 0xe64f, 0xe655, 0xe661, 0xe665, 0xe667, 0xe669, 0xe66f, 0xe675, 0xe720, 0xe742, 0xe743, 0xe744, 0xe745, 0xe746, 0xe747, 0xe748, 0xe749, 0xe74d, 0xe74e, 0xe750, 0xe752, 0xe753, 0xe754, 0xe757, 0xe758, 0xe759, 0xe75a, 0xe762, 0xe763, 0xe764, 0xe765, 0xe766, 0xe767, 0xe768, 0xe76d, 0xe76e, 0xe770, 0xe772, 0xe773, 0xe774, 0xe777, 0xe778, 0xe779, 0xe77a, 0xe820, 0xe841, 0xe845, 0xe848, 0xe849, 0xe84f, 0xe855, 0xe857, 0xe858, 0xe859, 0xe861, 0xe865, 0xe868, 0xe869, 0xe86f, 0xe874, 0xe875, 0xe877, 0xe878, 0xe879, 0xe920, 0xe941, 0xe943, 0xe944, 0xe945, 0xe947, 0xe949, 0xe94b, 0xe94c, 0xe94e, 0xe94f, 0xe952, 0xe953, 0xe954, 0xe955, 0xe95a, 0xe961, 0xe963, 0xe964, 0xe965, 0xe967, 0xe969, 0xe96a, 0xe96b, 0xe96c, 0xe96e, 0xe96f, 0xe972, 0xe973, 0xe974, 0xe975, 0xe97a, 0xea20, 0xea41, 0xea61, 0xea75, 0xea77, 0xea79, 0xeaad, 0xed20, 0xee20, 0xee4f, 0xee55, 0xee6f, 0xee75, 0xf020, 0xf043, 0xf044, 0xf047, 0xf048, 0xf04b, 0xf04c, 0xf04e, 0xf052, 0xf053, 0xf054, 0xf063, 0xf064, 0xf067, 0xf068, 0xf06b, 0xf06c, 0xf06e, 0xf072, 0xf073, 0xf074, 0xf120, 0xf141, 0xf145, 0xf149, 0xf14f, 0xf155, 0xf161, 0xf165, 0xf169, 0xf16f, 0xf175, 0xf241, 0xf242, 0xf244, 0xf245, 0xf248, 0xf249, 0xf24b, 0xf24c, 0xf24d, 0xf24e, 0xf24f, 0xf252, 0xf253, 0xf254, 0xf255, 0xf256, 0xf257, 0xf259, 0xf25a, 0xf261, 0xf262, 0xf264, 0xf265, 0xf268, 0xf269, 0xf26b, 0xf26c, 0xf26d, 0xf26e, 0xf26f, 0xf272, 0xf273, 0xf274, 0xf275, 0xf276, 0xf277, 0xf279, 0xf27a, 0xf355, 0xf375, 0xf441, 0xf461, 0xf520, 0xf948, 0xf968, 0xfc20, 0xfc41, 0xfc43, 0xfc45, 0xfc4b, 0xfc4c, 0xfc4f, 0xfc51, 0xfc54, 0xfc56, 0xfc61, 0xfc63, 0xfc65, 0xfc6b, 0xfc6c, 0xfc6f, 0xfc71, 0xfc74, 0xfc76, 0xd741, 0xd742, 0xd743, 0xd744, 0xd745, 0xd746, 0xd747, 0xd748, 0xd749, 0xd74a, 0xd74b, 0xd74c, 0xd74d, 0xd74e, 0xd74f, 0xd750, 0xd751, 0xd752, 0xd753, 0xd754, 0xd755, 0xd756, 0xd757, 0xd758, 0xd761, 0xd762, 0xd763, 0xd764, 0xd765, 0xd766, 0xd767, 0xd768, 0xd769, 0xd76a, 0xd76b, 0xd76c, 0xd76d, 0xd76e, 0xd76f, 0xd770, 0xd771, 0xd772, 0xd773, 0xd774, 0xd775, 0xd776, 0xd777, 0xd778, 0xd779, 0xd824, 0xd841, 0xd842, 0xd843, 0xd844, 0xd845, 0xd846, 0xd847, 0xd848, 0xd849, 0xd84b, 0xd84c, 0xd84d, 0xd84e, 0xd84f, 0xd850, 0xd851, 0xd852, 0xd853, 0xd854, 0xd855, 0xd856, 0xd857, 0xd858, 0xd85a, 0xd861, 0xd862, 0xd863, 0xd864, 0xd865, 0xd866, 0xd867, 0xd868, 0xd869, 0xd86b, 0xd86c, 0xd86d, 0xd86e, 0xd86f, 0xd870, 0xd871, 0xd872, 0xd873, 0xd874, 0xd875, 0xd876, 0xd877, 0xd878, 0xd87a, 0xd920, 0xd921, 0xd922, 0xd923, 0xd924, 0xd925, 0xd926, 0xd927, 0xd928, 0xd929, 0xd92a, 0xd92b, 0xd92c, 0xd92d, 0xd92e, 0xd92f, 0xd930, 0xd931, 0xd932, 0xd933, 0xd941, 0xd942, 0xd943, 0xd944, 0xd945, 0xd946, 0xd947, 0xd948, 0xd949, 0xd94a, 0xd94c, 0xd94d, 0xd94e, 0xd94f, 0xd950, 0xd951, 0xd952, 0xd953, 0xd954, 0xd955, 0xd956, 0xd957, 0xd958, 0xd959, 0xd95a, 0xd961, 0xd962, 0xd963, 0xd964, 0xd965, 0xd966, 0xd967, 0xd968, 0xd969, 0xd96a, 0xd96b, 0xd96c, 0xd96d, 0xd96e, 0xd96f, 0xd970, 0xd971, 0xd972, 0xd973, 0xd974, 0xd975, 0xd976, 0xd977, 0xd979, 0xd97a, 0xd97b, 0xd97c];
const ANSEL_VALUES_2 = '\u02c0\u1ea2\u1eba\u1ec8\u1ece\u1ee6\u1ef6\u1ea3\u1ebb\u1ec9\u1ecf\u1ee7\u1ef7\u02cb\xc0\xc8\xcc\xd2\xd9\u1e80\u1ef2\xe0\xe8\xec\xf2\xf9\u1e81\u1ef3\u02ca\xc1\u0106\xc9\u01f4\xcd\u1e30\u0139\u1e3e\u0143\xd3\u1e54\u0154\u015a\xda\u1e82\xdd\u0179\xe1\u0107\xe9\u01f5\xed\u1e31\u013a\u1e3f\u0144\xf3\u1e55\u0155\u015b\xfa\u1e83\xfd\u017a\u01fc\u01fd\u02c6\xc2\u0108\xca\u011c\u0124\xce\u0134\xd4\u015c\xdb\u0174\u0176\u1e90\xe2\u0109\xea\u011d\u0125\xee\u0135\xf4\u015d\xfb\u0175\u0177\u1e91\u02dc\xc3\u1ebc\u0128\xd1\xd5\u0168\u1e7c\u1ef8\xe3\u1ebd\u0129\xf1\xf5\u0169\u1e7d\u1ef9\u02c9\u0100\u0112\u1e20\u012a\u014c\u016a\u0101\u0113\u1e21\u012b\u014d\u016b\u01e2\u01e3\u02d8\u0102\u0114\u011e\u012c\u014e\u016c\u0103\u0115\u011f\u012d\u014f\u016d\u02d9\u1e02\u010a\u1e0a\u0116\u1e1e\u0120\u1e22\u0130\u1e40\u1e44\u1e56\u1e58\u1e60\u1e6a\u1e86\u1e8a\u1e8e\u017b\u1e03\u010b\u1e0b\u0117\u1e1f\u0121\u1e23\u1e41\u1e45\u1e57\u1e59\u1e61\u1e6b\u1e87\u1e8b\u1e8f\u017c\xa8\xc4\xcb\u1e26\xcf\xd6\xdc\u1e84\u1e8c\u0178\xe4\xeb\u1e27\xef\xf6\u1e97\xfc\u1e85\u1e8d\xff\u02c7\u01cd\u010c\u010e\u011a\u01e6\u01cf\u01e8\u013d\u0147\u01d1\u0158\u0160\u0164\u01d3\u017d\u01ce\u010d\u010f\u011b\u01e7\u01d0\u01f0\u01e9\u013e\u0148\u01d2\u0159\u0161\u0165\u01d4\u017e\u02da\xc5\xe5\u016f\u1e98\u1e99\u016e\u02bc\u02dd\u0150\u0170\u0151\u0171\xb8\xc7\u1e10\u0122\u1e28\u0136\u013b\u0145\u0156\u015e\u0162\xe7\u1e11\u0123\u1e29\u0137\u013c\u0146\u0157\u015f\u0163\u02db\u0104\u0118\u012e\u01ea\u0172\u0105\u0119\u012f\u01eb\u0173\u1ea0\u1e04\u1e0c\u1eb8\u1e24\u1eca\u1e32\u1e36\u1e42\u1e46\u1ecc\u1e5a\u1e62\u1e6c\u1ee4\u1e7e\u1e88\u1ef4\u1e92\u1ea1\u1e05\u1e0d\u1eb9\u1e25\u1ecb\u1e33\u1e37\u1e43\u1e47\u1ecd\u1e5b\u1e63\u1e6d\u1ee5\u1e7f\u1e89\u1ef5\u1e93\u1e72\u1e73\u1e00\u1e01\u2017\u1e2a\u1e2b\u0338\u023a\u023b\u0246\ua742\u0141\xd8\ua758\u023e\ua75e\u2c65\u023c\u0247\ua743\u0142\xf8\ua759\u2c66\ua75f\u2550\u2551\u2557\u255d\u255a\u2554\u2563\u2569\u2560\u2566\u256c\u2562\u2567\u255f\u2564\u2561\u2568\u255e\u2565\u256a\u2591\u2592\u2593\u2588\u2500\u2502\u2510\u2518\u2514\u250c\u2524\u2534\u251c\u252c\u253c\u2555\u255b\u2558\u2552\u2556\u255c\u2559\u2553\u256b\u258c\u2580\u2590\u2584\u25aa\u03c2\u0391\u0392\u03a5\u0394\u0395\u03a6\u0393\u03a8\u0399\u039a\u039b\u039c\u039d\u039f\u03a0\u03a7\u03a1\u03a3\u03a4\u03a9\u0398\u0397\u039e\u0396\u03b1\u03b2\u03c5\u03b4\u03b5\u03c6\u03b3\u03c8\u03b9\u03ba\u03bb\u03bc\u03bd\u03bf\u03c0\u03c7\u03c1\u03c3\u03c4\u03c9\u03b8\u03b7\u03be\u03b6\u0e3f\xa2\xa5\u20a7\u0192\xa4\u20a4\u20a0\u20a1\u20a2\u20a3\u20a5\u20a6\u20a8\u20a9\u20aa\u20ac\xb9\xb2\xb3\xaa\xba\xab\xbb\xa6\xb6\xa7\u2310\u2020\u2021\u2122\ufb01\ufb02\u2039\u203a\u2030\u2026\u201c\u201d\u201a\u201e\u2022\u2013\xa0\xb5\xbd\xbc\xbe\u221e\u2205\u2208\u2229\xac\u2261\xd7\u2265\u2264\xf7\u2248\u22c5\u2320\u2321\u221a\u2044\u2018\u2019\u2014\xad\u20ad\u20ae\u20af\u20ab';

export const decodeAnsel: FileDecoder = buffer => {
    const createTable = (keys: number[], values: string): Map<number, number> => {
        const map = new Map<number, number>();
        for (let i = 0; i < keys.length; i++) {
            map.set(keys[i], values.charCodeAt(i));
        }
        return map;
    };
    const table1 = createTable(ANSEL_KEYS_1, ANSEL_VALUES_1), table2 = createTable(ANSEL_KEYS_2, ANSEL_VALUES_2);

    const byteBuffer = new Uint8Array(buffer);

    const output = [];
    let i = 0;
    let pending = byteBuffer[i];
    i++;
    while (pending !== undefined) {
        const b = pending;
        pending = byteBuffer[i];
        i++;
        if (b < 128) { // Unchanged ASCII
            output.push(String.fromCharCode(b));
        } else if (pending !== undefined && ((b >= 0xE0 && b <= 0xFF) || (b >= 0xD7 && b <= 0xD9))) {
            // Two bytes
            const code = b * 256 + pending;
            const u = table2.get(code);
            if (u !== undefined) {
                pending = byteBuffer[i];
                i++;
                output.push(String.fromCharCode(u));
            } else {
                throw new Error(`Illegal ANSEL character code: ${code}`);
            }
        } else {
            // One byte
            const u = table1.get(b);
            const c = String.fromCharCode(u !== undefined ? u : 0xFFFD);
            output.push(c);
        }
    }

    return output.join('');
};
